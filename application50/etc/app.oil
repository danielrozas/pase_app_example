/* Copyright 2014, Mariano Cerdeiro                                          */
/* Copyright 2014, Pablo Ridolfi                                             */
/* Copyright 2014, Juan Cecconi                                              */
/* Copyright 2017, Gustavo Muro                                              */
/*                                                                           */
/* This file is part of CIAA Firmware.                                       */
/*                                                                           */
/* Redistribution and use in source and binary forms, with or without        */
/* modification, are permitted provided that the following conditions are    */
/* met:                                                                      */
/*                                                                           */
/* 1. Redistributions of source code must retain the above copyright notice, */
/*    this list of conditions and the following disclaimer.                  */
/*                                                                           */
/* 2. Redistributions in binary form must reproduce the above copyright      */
/*    notice, this list of conditions and the following disclaimer in the    */
/*    documentation and/or other materials provided with the distribution.   */
/*                                                                           */
/* 3. Neither the name of the copyright holder nor the names of its          */
/*    contributors may be used to endorse or promote products derived from   */
/*    this software without specific prior written permission.               */
/*                                                                           */
/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       */
/* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED */
/* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A           */
/* PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER */
/* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  */
/* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,       */
/* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR        */
/* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    */
/* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING      */
/* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS        */
/* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              */
/*                                                                           */
/*****************************************************************************/
/*  PASE app example OIL configuration file                                  */
/*                                                                           */
/*  This file describes the current OSEK configuration.                      */
/*  References:                                                              */
/*  - OSEK OS standard: http://portal.osek-vdx.org/files/pdf/specs/os223.pdf */
/*  - OSEK OIL standard: http://portal.osek-vdx.org/files/pdf/specs/oil25.pdf*/
/*****************************************************************************/

OSEK OSEK {

   OS	ExampleOS {
      STATUS = EXTENDED;			// sistema con status : extended (otro valor = STANDARD)
      ERRORHOOK = TRUE;				// OSEK hooks (valor = TRUE or FALSE)
      PRETASKHOOK = FALSE;
      POSTTASKHOOK = FALSE;
      STARTUPHOOK = FALSE;
      SHUTDOWNHOOK = FALSE;
      USERESSCHEDULER = FALSE;
      MEMMAP = FALSE;
   };

   APPMODE = AppMode1;

/*****************************************************************************/
/* EVENTOS                                                                   */
/*****************************************************************************/

/*****************************************************************************/
/* TASK InitTask                                                             */
/*                                                                           */
/* ACTIVATION = 1 : Numero maximo de pedidos de activacion en cola para la   */
/*                  tarea. Un valor igual a 1 indica que solo una activacion */
/*                  es permitida para la tarea                               */
/* AUTOSTART = TRUE : La tarea se ejecuta durante el procedimiento de inicio */
/* TYPE = EXTENDED : Puede tener uno o mas eventos                           */
/* SCHEDULE = NON : La Tarea no puede ser interrumpida                       */
/*****************************************************************************/

   TASK InitTask {
      PRIORITY = 10;
      ACTIVATION = 1;
      AUTOSTART = TRUE {
         APPMODE = AppMode1;
      }
      STACK = 512;
      TYPE = EXTENDED;
      SCHEDULE = NON;
   }

	TASK TimeCountTask {
		PRIORITY = 3;
		ACTIVATION = 1;
		AUTOSTART = FALSE;
		STACK = 512;
		TYPE = BASIC;
		SCHEDULE = FULL;
	}
	
	TASK Pwm {
		PRIORITY = 3;
		ACTIVATION = 1;
		AUTOSTART = FALSE;
		STACK = 512;
		TYPE = EXTENDED;
		SCHEDULE = NON;
	}

   TASK KeyboardPollingTask {
      PRIORITY = 3;
      ACTIVATION = 1;				// Numero maximo de pedidos de activacion en cola para la activacion
      STACK = 512;
      TYPE = BASIC;			    	// La tarea no admite la ocurrencia de eventos
      SCHEDULE = NON;				// La tarea no puede ser interrumpida
   }

   TASK KeyboardProcessTask {
      PRIORITY = 3;
      ACTIVATION = 1;				// Numero maximo de pedidos de activacion en cola para la activacion
      STACK = 512;
      TYPE = BASIC;			    	// La tarea no admite la ocurrencia de eventos
      SCHEDULE = NON;				// La tarea no puede ser interrumpida
   }


/*****************************************************************************/
/* ALARM ActivateTimeCountTask                                               */
/*                                                                           */
/*       COUNTER = HardwareCounter : Define el contador asignado a esta      */
/*                 Alarma                                                    */
/*       ACTION = ACTIVATETASK : Define que tipo de notificacion es usada    */
/*                cuando la alarma expira. En este caso la tarea que será    */
/*                activada cuando la alarma expira                           */
/*       AUTOSTART = FALSE : Define si una alarma es iniciada automaticamente*/
/*                           cuando se inicia el sistema dependiendo del     */
/*                           modo de aplicacion                              */
/*                                                                           */
/*****************************************************************************/

	ALARM ActivateTimeCountTask {
		COUNTER = HardwareCounter;
		ACTION = ACTIVATETASK {
			TASK = TimeCountTask;
      	}
		AUTOSTART = FALSE;
   	}
   	
	ALARM ActivatePwm {
		COUNTER = HardwareCounter;
		ACTION = ACTIVATETASK {
			TASK = Pwm;
		}
		AUTOSTART = FALSE;		
	}
	
/*****************************************************************************/
/* ALARM ActivateKeyboardPollingTask                                         */
/*                                                                           */
/*       COUNTER = HardwareCounter : Define el contador asignado a esta      */
/*                 Alarma                                                    */
/*       ACTION = ACTIVATETASK : Define que tipo de notificacion es usada    */
/*                cuando la alarma expira. En este caso la tarea que será    */
/*                activada cuando la alarma expira                           */
/*       AUTOSTART = FALSE : Define si una alarma es iniciada automaticamente*/
/*                           cuando se inicia el sistema dependiendo del     */
/*                           modo de aplicacion                              */
/*                                                                           */
/*****************************************************************************/

   	ALARM ActivateKeyboardPollingTask {
    	COUNTER = HardwareCounter;
      	ACTION = ACTIVATETASK {
        	TASK = KeyboardPollingTask;
      	}
      	AUTOSTART = FALSE;		
   	}
   	
   		   	
/*****************************************************************************/
/* ALARM ActivateKeyboardProcessTask                                         */
/*                                                                           */
/*       COUNTER = HardwareCounter : Define el contador asignado a esta      */
/*                 Alarma                                                    */
/*       ACTION = ACTIVATETASK : Define que tipo de notificacion es usada    */
/*                cuando la alarma expira. En este caso la tarea que será    */
/*                activada cuando la alarma expira                           */
/*       AUTOSTART = FALSE : Define si una alarma es iniciada automaticamente*/
/*                           cuando se inicia el sistema dependiendo del     */
/*                           modo de aplicacion                              */
/*                                                                           */
/*****************************************************************************/

   	ALARM ActivateKeyboardProcessTask {
    	COUNTER = HardwareCounter;
      	ACTION = ACTIVATETASK {
        	TASK = KeyboardProcessTask;
      	}
      	AUTOSTART = FALSE;		
   	}
   	
   		   	
/*****************************************************************************/
/* COUNTER HardwareCounter                                                   */
/*                                                                           */
/*         MAXALLOWEDVALUE = 1000 : Maximo Valor del Contador                */
/*         TICKSPERBASE = 1 : El numero de ticks requeridos para alcanzar    */
/*                            una unidad de contador específica.             */
/*         MINCYCLE = 1 : Especifica el numero minimo permitido de counter de*/
/*                        ticks para una alarma ciclica enlazada al contador */
/*         TYPE = HARDWARE : hardware/software tick source for alarms        */
/*                                                                           */
/*****************************************************************************/

   COUNTER HardwareCounter {
      MAXALLOWEDVALUE = 1000;
      TICKSPERBASE = 1;
      MINCYCLE = 1;
      TYPE = HARDWARE;
      COUNTER = HWCOUNTER0;
   }

   ISR GPIOINTHandler0 {
      INTERRUPT = GPIO0;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler1 {
      INTERRUPT = GPIO1;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler2 {
      INTERRUPT = GPIO2;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler3 {
      INTERRUPT = GPIO3;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler4 {
      INTERRUPT = GPIO4;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler5 {
      INTERRUPT = GPIO5;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler6 {
      INTERRUPT = GPIO6;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
   ISR GPIOINTHandler7 {
      INTERRUPT = GPIO7;
	  CATEGORY = 2;
	  PRIORITY = 0;
   };
};
